name: Deploy Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'Frontend'
      - 'Frontend/**'
      - '.github/workflows/deploy-frontend.yml'

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo with submodules
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Ensure service folder exists on VM
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} \
            "mkdir -p /opt/scholarai/Frontend"

      - name: Copy frontend (only changes) to VM
        run: |
          rsync -az --delete \
            --exclude 'node_modules' \
            --exclude '.next' \
            -e "ssh -o StrictHostKeyChecking=no" \
            Frontend/ ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/opt/scholarai/Frontend/

      - name: Deploy Frontend
        run: |
          set -e
          ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            set -e

            echo "üöÄ Starting Frontend deployment..."
            cd /opt/scholarai/Frontend

            echo "üßπ Cleaning up old containers/images..."
            docker rm -f scholar-frontend || true
            docker image prune -f --filter "label=service=frontend" || true

            echo "üî® Building Frontend..."
            if ! docker compose -f docker-compose.prod.yml build frontend; then
              echo "‚ùå Build failed, aborting deployment!"
              exit 1
            fi

            echo "üì¶ Starting Frontend..."
            docker compose -f docker-compose.prod.yml up -d frontend

            echo "‚è≥ Waiting for Frontend health..."
            healthy=0
            for i in {1..20}; do
              STATUS=$(docker inspect --format='{{json .State.Health.Status}}' scholar-frontend 2>/dev/null | tr -d '"')
              if [ "$STATUS" = "healthy" ]; then
                echo "‚úÖ Frontend is healthy!"
                echo "üåê Access it at: http://${{ secrets.VM_HOST }}:3000"
                healthy=1
                break
              else
                echo "Still waiting... ($i/20)"
                sleep 10
              fi
            done

            if [ $healthy -eq 0 ]; then
              echo "‚ùå Frontend failed to become healthy!"
              docker logs scholar-frontend || true
              exit 1
            fi

            echo "üìä Current Frontend status:"
            docker ps --filter "name=scholar-frontend"
          EOF
